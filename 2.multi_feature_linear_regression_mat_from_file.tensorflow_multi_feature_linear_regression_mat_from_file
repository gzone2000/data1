{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== 파라미터 ========\n",
    "training_steps = 22000\n",
    "display_step = 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[800],\n",
       "       [320],\n",
       "       [600],\n",
       "       [630],\n",
       "       [700],\n",
       "       [680],\n",
       "       [730],\n",
       "       [720],\n",
       "       [700],\n",
       "       [920]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ======== 학습데이터 ========\n",
    "# 학습시간, 해외거주\n",
    "x_data = np.array( [\n",
    "    [54, 8, 30, 24, 46, 12, 20, 37, 40, 48],  # 학습시간\n",
    "    [12, 0, 12, 15, 12, 0, 36, 12, 12, 24]  # 해외거주\n",
    "], dtype=np.float32)\n",
    "\n",
    "# 토익점수\n",
    "y_data = np.array([800, 320, 600, 630, 700, 680, 730, 720, 700, 920])\n",
    "\n",
    "#  배열 위치 변환\n",
    "X = x_data[:].T\n",
    "Y = y_data.reshape(-1,1)\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(1,), dtype=float32, numpy=array([-2.4949064], dtype=float32)>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ======== W, B 초기값 설정 =========\n",
    "W = tf.Variable(tf.random.normal((2,1)))\n",
    "b = tf.Variable(np.random.randn(), name=\"bias\")\n",
    "W[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== Multiple Linear Regression 에서 학습될 가설 ========\n",
    "# Linear regression (Wx + b).\n",
    "def linear_regression(X):\n",
    "    return tf.matmul(X, W) + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== Multiple Linear Regression 에서 학습될 가설의 Cost Function ========\n",
    "# Mean square error.\n",
    "def mean_square(y_pred, y_true):\n",
    "    return tf.reduce_mean(tf.square(y_pred - y_true)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== Gradient Descent Algorithm 에서 Step ========\n",
    "learning_rate = 0.0006"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== 텐서플로우에 내장된 GradientDescentOptimizer ========\n",
    "# Stochastic Gradient Descent Optimizer.\n",
    "optimizer = tf.optimizers.SGD(learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ======== GradientDescentOptimizer ========\n",
    "# Optimization process. \n",
    "def run_optimization():\n",
    "    # Wrap computation inside a GradientTape for automatic differentiation. : 자동 미분\n",
    "    with tf.GradientTape() as g:\n",
    "        pred = linear_regression(X)\n",
    "        cost = mean_square(pred, Y)\n",
    "\n",
    "    # Compute gradients.\n",
    "    # gradients = g.gradient(cost, [W, b])\n",
    "    \n",
    "    # Update W and b following gradients.\n",
    "    # optimizer.apply_gradients(zip(gradients, [W, b]))\n",
    "    \n",
    "    weight, bias = g.gradient(cost, [W, b])\n",
    "    W.assign_sub(learning_rate * weight)\n",
    "    b.assign_sub(learning_rate * bias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "step: 1000, cost: 25600.632812, W1: 13.019457, W2: 10.303164, b: 71.358757\n",
      "step: 2000, cost: 19739.402344, W1: 11.794519, W2: 9.516554, b: 130.554459\n",
      "step: 3000, cost: 15752.087891, W1: 10.784200, W2: 8.867763, b: 179.378677\n",
      "step: 4000, cost: 13039.549805, W1: 9.950888, W2: 8.332642, b: 219.648972\n",
      "step: 5000, cost: 11194.260742, W1: 9.263580, W2: 7.891277, b: 252.863419\n",
      "step: 6000, cost: 9938.923828, W1: 8.696688, W2: 7.527239, b: 280.258789\n",
      "step: 7000, cost: 9084.947266, W1: 8.229124, W2: 7.226986, b: 302.854065\n",
      "step: 8000, cost: 8503.995117, W1: 7.843479, W2: 6.979340, b: 321.490540\n",
      "step: 9000, cost: 8108.777344, W1: 7.525396, W2: 6.775079, b: 336.862061\n",
      "step: 10000, cost: 7839.920410, W1: 7.263049, W2: 6.606609, b: 349.540100\n",
      "step: 11000, cost: 7657.018066, W1: 7.046664, W2: 6.467653, b: 359.997070\n",
      "step: 12000, cost: 7532.591309, W1: 6.868191, W2: 6.353045, b: 368.621857\n",
      "step: 13000, cost: 7447.944336, W1: 6.720985, W2: 6.258514, b: 375.735626\n",
      "step: 14000, cost: 7390.360840, W1: 6.599570, W2: 6.180546, b: 381.603058\n",
      "step: 15000, cost: 7351.188965, W1: 6.499432, W2: 6.116241, b: 386.442383\n",
      "step: 16000, cost: 7324.540039, W1: 6.416832, W2: 6.063199, b: 390.433960\n",
      "step: 17000, cost: 7306.411621, W1: 6.348711, W2: 6.019453, b: 393.725983\n",
      "step: 18000, cost: 7294.076660, W1: 6.292520, W2: 5.983369, b: 396.441467\n",
      "step: 19000, cost: 7285.688477, W1: 6.246173, W2: 5.953609, b: 398.681183\n",
      "step: 20000, cost: 7279.980469, W1: 6.207955, W2: 5.929065, b: 400.528107\n",
      "step: 21000, cost: 7276.099121, W1: 6.176425, W2: 5.908817, b: 402.051758\n",
      "step: 22000, cost: 7273.454590, W1: 6.150422, W2: 5.892118, b: 403.308441\n"
     ]
    }
   ],
   "source": [
    "# Run training for the given number of steps.\n",
    "for step in range(1, training_steps + 1):\n",
    "    # Run the optimization to update W and b values.\n",
    "    run_optimization()\n",
    "    \n",
    "    if step % display_step == 0:\n",
    "        pred = linear_regression(X)\n",
    "        cost = mean_square(pred, Y)\n",
    "        print(\"step: %i, cost: %f, W1: %f, W2: %f, b: %f\" % (step, cost, W[0].numpy(), W[1].numpy(), b.numpy()))\n",
    "        #print(\"예측값 : {}\".format(pred.numpy()))\n",
    "        \n",
    "        '''\n",
    "        print(\"cost type: {}\".format(type(cost)))\n",
    "        print(\"W type: {}\".format(type(W)))\n",
    "        print(\"b type: {}\".format(type(b)))\n",
    "        print(\"pred type: {}\".format(type(pred)))\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 시간, 10 개월 해외거주: 646.742310 점\n",
      "2 시간, 24 개월 해외거주: 557.020142 점\n"
     ]
    }
   ],
   "source": [
    "# ======== 학습된 우리의 프로그램에 예측 문의 ========\n",
    "\n",
    "sample = np.array([\n",
    "    [30, 10] \n",
    "], dtype=np.float32)\n",
    "\n",
    "sample1 = np.array([\n",
    "    [2, 24] \n",
    "], dtype=np.float32)\n",
    "\n",
    "# 30 시간 공부하고 10개월 해외에서 거주했을 경우 토익점수 예측\n",
    "print (\"%i 시간, %i 개월 해외거주: %f 점\" % (sample[0,0], sample[0,1], linear_regression(sample).numpy()))\n",
    "print (\"%i 시간, %i 개월 해외거주: %f 점\" % (sample1[0,0], sample1[0,1], linear_regression(sample1).numpy()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
